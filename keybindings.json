// Place your key bindings in this file to override the defaults
[
  // accept copilot suggestions the way I am used to it (:
  {
    "key": "shift+tab",
    "command": "editor.action.inlineSuggest.commit",
    "when": "inlineSuggestionVisible && editorTextFocus"
  },

  {
    "key": "cmd+i",
    "command": "inlineChat.start"
  },

  // unbind this for use in vimish things
  {
    "key": "ctrl+w",
    "command": "-workbench.action.switchWindow"
  },
  {
    "key": "cmd+`",
    "command": "workbench.action.switchWindow"
  },

  // vimish copilot navigation
  {
    "key": "ctrl+w h",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "auxiliaryBarFocus"
  },
  {
    "key": "ctrl+shift+space",
    "command": "runCommands",
    "args": {
      "commands": [
        { "command": "_setContext", "args": ["leaderkeyState", "SPC"] },
        { "command": "leaderkey.render", "args": "SPC" }
      ]
    },
    "when": "!panelFocus && !auxiliaryBarFocus"
  },
  {
    "key": "ctrl+w h",
    "command": "workbench.action.focusLeftGroup",
    "when": "inChatEditor"
  },
  {
    "key": "ctrl+w l",
    "command": "workbench.action.focusRightGroup",
    "when": "inChatEditor"
  },
  {
    "key": "ctrl+w j",
    "command": "workbench.action.focusPanel",
    "when": "inChatEditor"
  },
  {
    "key": "ctrl+w a",
    "command": "workbench.action.chat.openAgent",
    "when": "auxiliaryBarFocus || inChatEditor"
  },
  {
    "key": "ctrl+w c",
    "command": "workbench.action.chat.openAsk",
    "when": "auxiliaryBarFocus || inChatEditor"
  },
  {
    "key": "ctrl+w e",
    "command": "workbench.action.chat.openEdit",
    "when": "auxiliaryBarFocus || inChatEditor"
  },
  {
    "key": "ctrl+w n",
    "command": "workbench.action.chat.newChat",
    "when": "auxiliaryBarFocus || inChatEditor"
  },
  {
    "key": "ctrl+w q",
    "command": "workbench.action.closeAuxiliaryBar",
    "when": "auxiliaryBarFocus"

  },
  {
    "key": "ctrl+w q",
    "command": "workbench.action.closeActiveEditor",
    "when": "inChatEditor"
  },

  // Vimish panel navigation
  {
    "key": "ctrl+w k",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "panelFocus"
  },
  {
    "key": "ctrl+w m",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "panelFocus"
  },
  {
    "key": "alt+ctrl+k",
    "command": "workbench.action.terminal.resizePaneUp",
    "when": "panelVisible"
  },
  {
    "key": "alt+ctrl+j",
    "command": "workbench.action.terminal.resizePaneDown",
    "when": "panelVisible"
  },
  {
    "key": "ctrl+w l",
    "command": "workbench.action.nextPanelView",
    "when": "panelFocus"
  },
  {
    "key": "ctrl+w h",
    "command": "workbench.action.previousPanelView",
    "when": "panelFocus"
  },
  {
    "key": "ctrl+w q",
    "command": "workbench.action.closePanel",
    "when": "panelFocus"
  },

  // MAGIT vim bindings
  {
    "key": "g g",
    "command": "cursorTop",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "g r",
    "command": "magit.refresh",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "tab",
    "command": "extension.vim_tab",
    "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && !inlineEditIsVisible && editorLangId != 'magit'"
  },
  {
    "key": "tab",
    "command": "-extension.vim_tab"
  },
  {
    "key": "x",
    "command": "magit.discard-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "k",
    "command": "-magit.discard-at-point"
  },
  {
    "key": "-",
    "command": "magit.reverse-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "v",
    "command": "-magit.reverse-at-point"
  },
  {
    "key": "shift+-",
    "command": "magit.reverting",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+v",
    "command": "-magit.reverting"
  },
  {
    "key": "shift+o",
    "command": "magit.resetting",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+x",
    "command": "-magit.resetting"
  },
  {
    "key": "x",
    "command": "-magit.reset-mixed"
  },
  {
    "key": "ctrl+u x",
    "command": "-magit.reset-hard"
  },

  // Help with identifying valid where clauses and other low level stuff
  {
    "key": "cmd+alt+i",
    "command": "workbench.action.toggleDevTools"
  },
  {
    "key": "shift+cmd+c",
    "command": "-workbench.action.terminal.openNativeConsole",
    "when": "!terminalFocus"
  },
  {
    "key": "shift+cmd+c",
    "command": "workbench.action.inspectContextKeys"
  },

  // Dired config
  {
    "key": "space",
    "commands": [
      { "command": "_setContext", "args": ["leaderkeyState", "SPC"] },
      { "command": "leaderkey.render", "args": "SPC" }
    ],
    "when": "dired.open"
  },
  {
    "key": "ctrl+x ctrl+q",
    "command": "extension.dired.toggleReadOnly",
    "when": "dired.open"
  },
  {
    "key": "ctrl+c ctrl+c",
    "command": "extension.dired.wdired.commit",
    "when": "dired.open"
  },
]
